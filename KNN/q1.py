# -*- coding: utf-8 -*-
"""q1_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPurq3vrfQUj5SD6P3DtY2eXUn6Azbak
"""

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib as plt
import math
import operator
from sklearn.metrics import accuracy_score

class KNNClassifier:

  def __init__(self,kvalue=5):
    self.distances=[]
    self.k=kvalue


  def distance_calculation(self,param):
    if(param==1):
        #Euclidean Distance
        for i in self.test_images:
            for j in self.train_images:
                euclid_distance=np.sum((i-j)**2)
                self.distances.append(euclid_distance)

    else:
        #Manhattan Distance
        for i in self.test_images:
          for j in self.train_images:
            manhatten_distance=np.sum(abs(i-j))
            self.distances.append(manhatten_distance)

  def predict_number(self,list_k):
    votes={}
    for i in range(len(list_k)):
        response=list_k[i][1];
        if(response in votes):
            votes[response]+=1
        else:
            votes[response]=1
    # print(votes)
    sorted_votes=sorted(votes.items(),key=lambda item: item[1])
    # print(sorted_votes)
    return sorted_votes[len(sorted_votes)-1][0]





  def train(self,trainpath):
    train_df=pd.read_csv(trainpath,header=None)
    train_array=train_df.to_numpy()
    self.train_labels=train_array[:,0]
    self.train_images=train_array[:,1:]


  def predict(self,testpath):
    test_df=pd.read_csv(testpath,header=None)
    self.test_images=test_df.to_numpy()
    print('Distance calculation started')
    self.distance_calculation(1)
    print('distance calculation complete')
    predicted_list=[]
    list_k=[]
    for i in range(0,len(self.distances),len(self.train_images)):
        for j in range(i+0,i+len(self.train_images)):
            list_k.append((self.distances[j],self.train_labels[j%len(self.train_labels)]))
            if(len(list_k)>self.k):
                list_k.sort()
                list_k=list_k[:self.k]
        predicted_list.append(self.predict_number(list_k))
        list_k.clear()
    return predicted_list

# trainfilename='/content/drive/My Drive/Datasets/q1/train.csv'
# testfilename='/content/drive/My Drive/Datasets/q1/test.csv'
# testlabelpath='/content/drive/My Drive/Datasets/q1/test_labels.csv'
# knc=KnnClassifier()
# knc.train(trainfilename)
# predictions=knc.predict(testfilename)
# val=pd.read_csv(testlabelpath,header=None)
# vala=val.to_numpy()
# test_labels = vala[:,0]
# print (accuracy_score(test_labels, predictions))
